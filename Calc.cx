#include <string.h>
#include "abd/printf.h"

//HEADERX(Calc.cx.h,_HTE_CALC_COMPONENT_H_)
#include <awtk/HComponent.h>

Class(Calc) {
	HComponent_st	super;
	double		display;
	double		last;
	char		lastOper;
	int		decimalFlag;
};

Constructor(Calc, AData attributes);
Destructor(Calc);

He	calcRender(HComponent self);
int	calcClickHandler(AString event_type, void *component, AString value);

//ENDX

Constructor(Calc, AData attributes)
{
	CInit(Calc);
	HComponentConstructor((HComponent)self, attributes);

	self->super.render = calcRender;

	self->display = 0.0;
	self->last = 0.0;
	self->lastOper = ' ';
	self->decimalFlag = 0;


	return self;
}

Destructor(Calc)
{
	free(self);
}

int calcClickHandler(AString event_type, void *component, AString value)
{
Calc self = (Calc)component;
char	ch;


	errLogf("Teste char >%s<\n", value->buffer);
	if(value==NULL) return 0;
	if(aStringGetBuffer(value)==NULL) return 0;

	ch = *(aStringGetBuffer(value));

	switch(ch){
	case '+':
	case '-':
	case 'x':
	case '/':
			self->last = self->display;
			self->lastOper = ch;
			self->display = 0.0;
			self->decimalFlag = 0;
			break;
	case 'S':
			self->display = -(self->display);
			break;
	case 'C':
			self->last = 0.0;
			self->lastOper = ' ';
	case 'X':	
			self->display = 0.0;
			break;
	case '.':
			self->decimalFlag = 10;
			break;
	case '=':
			switch(self->lastOper){
			case '+': self->display = self->last + self->display; break;
			case '-': self->display = self->last - self->display; break;
			case 'x': self->display = self->last * self->display; break;
			case '/': self->display = self->last / self->display; break;
			}
			self->decimalFlag = 0;
			break;
	default:
			if(self->decimalFlag > 0){
				if(self->decimalFlag<1000000){
					self->display = self->display + ((double)atoi(value->buffer)) / (self->decimalFlag);
					errLogf(" C %f ", self->display);
					self->decimalFlag *= 10;
				}
			}else{
				self->display = self->display * 10 + atoi(value->buffer);
			}
	}

	return 0;
}

void static formatDisplay(char *buffer, double value)
{
int	 len;

	snprintf(buffer, 64, "%8.8lf", value);
	len = strlen(buffer) - 1;

	while(len>0){
		if(buffer[len]=='.') {
			buffer[len] = 0;
			break;
		}
		if(buffer[len]!='0') break;
		buffer[len--] = 0;
	}
}

He static calcPainelRender(Calc self, ...)
{
char	value[64];
char	last[64];

	formatDisplay(value, self->display);

	formatDisplay(last, self->last);

	switch(self->lastOper){
	case '+': strcat(last, " +"); break;
	case '-': strcat(last, " -"); break;
	case 'x': strcat(last, " x"); break;
	case '/': strcat(last, " /"); break;
	default:  strcat(last, " ");
	}

	return {%
	<div class="painel">
		<div class="painel_last"> 
			<div class="painel_last_label"> Last: </div>
			<div class="painel_last_value"> {last} </div>
		</div>
		<div class="painel_curr"> {value} </div>
	</div>
	%};
}

He static calcKeyboardRender(Calc self, ...)
{
	return {%
	<div class="keyboard">
		<div class="keyboard_row">
			<div class="keyboard_button" onClick=calcClickHandler(("C"))> C </div>
			<div class="keyboard_button" onClick=calcClickHandler(("X"))> CE </div>
			<div class="keyboard_button" onClick=calcClickHandler((""))>  </div>
			<div class="keyboard_button" onClick=calcClickHandler(("/"))> / </div>
		</div>
		<div class="keyboard_row">
			<div class="keyboard_button" onClick=calcClickHandler(("7"))> 7 </div>
			<div class="keyboard_button" onClick=calcClickHandler(("8"))> 8 </div>
			<div class="keyboard_button" onClick=calcClickHandler(("9"))> 9 </div>
			<div class="keyboard_button" onClick=calcClickHandler(("x"))> x </div>
		</div>
		<div class="keyboard_row">
			<div class="keyboard_button" onClick=calcClickHandler(("4"))> 4 </div>
			<div class="keyboard_button" onClick=calcClickHandler(("5"))> 5 </div>
			<div class="keyboard_button" onClick=calcClickHandler(("6"))> 6 </div>
			<div class="keyboard_button" onClick=calcClickHandler(("-"))> - </div>
		</div>
		<div class="keyboard_row">
			<div class="keyboard_button" onClick=calcClickHandler(("1"))> 1 </div>
			<div class="keyboard_button" onClick=calcClickHandler(("2"))> 2 </div>
			<div class="keyboard_button" onClick=calcClickHandler(("3"))> 3 </div>
			<div class="keyboard_button" onClick=calcClickHandler(("+"))> + </div>
		</div>
		<div class="keyboard_row">
			<div class="keyboard_button" onClick=calcClickHandler(("S"))> +/- </div>
			<div class="keyboard_button" onClick=calcClickHandler(("0"))> 0 </div>
			<div class="keyboard_button" onClick=calcClickHandler(("."))> . </div>
			<div class="keyboard_button" onClick=calcClickHandler(("="))> = </div>
		</div>
	</div>
	%};
}

He calcRender(HComponent component)
{
Calc self = (Calc)component;

	//<div class="calc" id={self->super.id}>
	return {%
	<div class="cx-calc">
		<calcPainelRender(self) />
		<calcKeyboardRender(self) />
	</div>
	%};
}

