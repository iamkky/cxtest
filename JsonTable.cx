#include <stddef.h>
#include <stdlib.h>
#include <string.h>

#include <abd/printf.h>
#include <abd/malloc_copy.h>
#include <abd/sort.h>

#include <awtk/api.h>

//HEADERX(JsonTable.cx.h, _JSONTABLE_COMPONENT_H_)
#include <awtk/HComponent.h>
#include <abjson/json.h>

Class(JsonTable) {
	HComponent_st   hcomponent;
	JsonValue	table;
	StringBuffer	dataString;
	int		dataFetched;
	char		**fields;
	int		nfields;
	char		**sortFields;
	int		sorted;
};

//Constructor(JsonTable);
//Constructor(JsonTable, int nFields, const char **fields);
Constructor(JsonTable, char *url, int nFields, const char **fields, const char **sortBy);

He jsonTableRender(HComponent component);

//ENDX


int static jsonTableDataFetchHandler(void *component, StringBuffer sb);

Constructor(JsonTable, char *url, int nFields, const char **fields, const char **sortBy)
{
	CInit(JsonTable);
	HComponentConstructor((HComponent)self);

	self->hcomponent.render = jsonTableRender;

	self->dataFetched = 0;

	self->fields = (char **)malloc_copy(fields, sizeof(char *) * nFields);
	self->nfields = nFields;

	self->sortFields = (char **)malloc_copy(sortBy, sizeof(char *) * nFields);
	self->sorted = 0;

	if(self->dataFetched==0){
		//wasmFetch("json/MOCK_DATA.json", self, jsonTableDataFetchHandler);	
		wasmFetch(url, self, jsonTableDataFetchHandler);	
		self->dataFetched = 1;
	}

	return self;
}

///// Handlers
/////

int static jsonTableDataFetchHandler(void *component, StringBuffer sb)
{
JsonTable  self = (JsonTable)component;
JsonValue  j;
JsonParser jp;
int lcount, result;

	//errLogf("TESTE RESP: %80.80s\n", sb->buffer);

	self->dataString = sb;

	jp = JsonParserNew(sb->buffer, &lcount);
	lcount = 0;
	result = JsonParserParse(jp);
	if(result>0){
		self->table = jp->value[0].value;
		//fprintf(stderr,"Value Type %02d\n", jsonValueGetType(json));
		//jsonValuePrint(json);
		//fprintf(stdout,"\n");
		//jsonValueFree(json);
	}else{
		self->table = NULL;
		//fprintf(stderr,"Failed to parse line %d\n", lcount);
	}

	JsonParserFree(jp);

	//j = parseJsonString(sb->buffer);
	//j = parseJsonString(sb->buffer);
	//self->table = j;

	return 0;
} 

// Manages table header click callback
int static jsonTableClickHandler(void *component, char *value)
{
JsonTable self = (JsonTable)component;
char	  dir = '+';

	errLogf("clickTable %s", value);

	if(!strcmp(self->sortFields[0]+1, value)){
		if(self->sortFields[0][0]=='+'){
			self->sortFields[0][0] = '-';
		}else{
			self->sortFields[0][0] = '+';
		}
	}else{
		self->sortFields[0] = strf("%c%s", dir, value);
	}
	self->sortFields[1] = NULL;
	self->sorted = 0;

	return 0;
}


int static jsonTableCheckSortFields(char **sortFields, char *field)
{
	while(*sortFields){
		if(!strcmp((*sortFields)+1, field)){
			return (sortFields[0][0]=='-') ? -1 : 1;
		}
		sortFields++;
	}

	return 0;
}


//JsonValue table, int nfields, char **fields, char **sortFields)
He jsonTableRender(HComponent component)
{
JsonTable	self = (JsonTable)component;
He	htable, hrow, hcell, dir;
JsonValue	field, j, l;
int		n, f, s;

	if(self->table == NULL) return NULL;
	if(self->table->type != JSON_ARRAY) return NULL;

	if(!self->sorted){
		errLogf("SORT: 1 %s", self->sortFields[0]);
		//jsonValueObjectArraySort(self->table, self->sortFields);
		errLogf("SORT: 2 %s", self->sortFields[0]);
		self->sorted = 1;
	}

	htable = {% <table class="teste"> </table> %};
	hrow = {% <tr class="teste_row"> </tr> %};
	for(f=0; f<self->nfields; f++){
		s = jsonTableCheckSortFields(self->sortFields, self->fields[f]);
		heAddChild(hrow,
			{% <th class="table_header"> <div class={s==0 ? NULL : (s==1? "table_sort_down" : "table_sort_up")}> </div> {self->fields[f]} </th> %}
			//htTh("table_header",
			//	htDiv(s==0 ? NULL : (s==1? "table_sort_down" : "table_sort_up"), NULL),
			//	htText(self->fields[f]),
			//	htEventNew("onClick", self, jsonTableClickHandler,self->fields[f])
			//)
		);
	}
	heAddChild(htable, hrow);
	//htable->add(htable,hrow);

	if(jsonValueGetType(self->table) == JSON_ARRAY){
		for(n=0; n<jsonValueGetLength(self->table); n++){
			j = jsonValueGet_i(self->table, n);
			if(j==NULL || jsonValueGetType(j)!=JSON_OBJECT) continue;
			heAddChild(htable, hrow = {% <tr class="teste_row"> </tr> %} );
			for(f=0; f<self->nfields; f++){
				field = jsonValueGet_k(j, self->fields[f]);
				heAddChild(hrow, {% <td class="table_header"> 
								<div class={n%2?"table_cell table_even":"table_cell table_pair"}> </div>
								{jsonValueGetAsString(field)}
						</td> %}
				);
				// htTd(n%2?"table_cell table_even":"table_cell table_pair", htText(jsonValueGetAsString(field))));
			}
		}
	}

	return {% <div class="json">  [htable] </div> %};
}
