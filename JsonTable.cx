#include <stddef.h>
#include <stdlib.h>
#include <string.h>

#include <abd/printf.h>
#include <abd/mallocCopy.h>
#include <abd/errLogf.h>

#include <abd/string.h>

#include <abjson/parser.h>
#include <abjson/utils.h>
#include <abd/musl_sort.h>
#include </bdStringBuffer.h>
#include <awtk/api.h>

//HEADERX(JsonTable, _JSONTABLE_COMPONENT_H_)
#include <awtk/HComponent.x.h>
#include <abjson/json.h>
#include <abd/StringBuffer.h>

Class(JsonTable) {
	HComponent_st   hcomponent;
	JsonValue	table;
	StringBuffer	dataString;
	int		dataFetched;
	char		**fields;
	int		nfields;
	char		**sortFields;
	int		sorted;
};

//Constructor(JsonTable);
//Constructor(JsonTable, int nFields, const char **fields);
Constructor(JsonTable, char *url, int nFields, const char **fields, const char **sortBy);

HtElement jsonTableRender(HComponent component);

//ENDX


int static jsonTableDataFetchHandler(void *component, StringBuffer sb);

Constructor(JsonTable, char *url, int nFields, const char **fields, const char **sortBy)
{
	CInit(JsonTable);
	HComponentConstructor((HComponent)self);

	self->hcomponent.render = jsonTableRender;

	self->dataFetched = 0;

	self->fields = (char **)mallocCopy(fields, sizeof(char *) * nFields);
	self->nfields = nFields;

	self->sortFields = (char **)mallocCopy(sortBy, sizeof(char *) * nFields);
	self->sorted = 0;

	if(self->dataFetched==0){
		//wasmFetch("json/MOCK_DATA.json", self, jsonTableDataFetchHandler);	
		wasmFetch(url, self, jsonTableDataFetchHandler);	
		self->dataFetched = 1;
	}

	return self;
}

///// Handlers
/////

int static jsonTableDataFetchHandler(void *component, StringBuffer sb)
{
JsonTable self = (JsonTable)component;
JsonValue j;

	errLogf("TESTE RESP: %80.80s\n", sb->buffer);

	self->dataString = sb;
	j = parseJsonString(sb->buffer);
	self->table = j;

	return 0;
} 

// Manages table header click callback
int static jsonTableClickHandler(void *component, char *value)
{
JsonTable self = (JsonTable)component;
char	  dir = '+';

	errLogf("clickTable %s", value);

	if(!strcmp(self->sortFields[0]+1, value)){
		if(self->sortFields[0][0]=='+'){
			self->sortFields[0][0] = '-';
		}else{
			self->sortFields[0][0] = '+';
		}
	}else{
		self->sortFields[0] = strfmt("%c%s", dir, value);
	}
	self->sortFields[1] = NULL;
	self->sorted = 0;

	return 0;
}

int static jsonTableCheckSortFields(char **sortFields, char *field)
{
	while(*sortFields){
		if(!strcmp((*sortFields)+1, field)){
			return (sortFields[0][0]=='-') ? -1 : 1;
		}
		sortFields++;
	}

	return 0;
}

//JsonValue table, int nfields, char **fields, char **sortFields)
HtElement jsonTableRender(HComponent component)
{
JsonTable	self = (JsonTable)component;
HtElement	htable, hrow, hcell, dir;
JsonValue	field, j, l;
int		n, f, s;

	if(self->table == NULL) return NULL;
	if(self->table->type != JSON_ARRAY) return NULL;

	if(!self->sorted){
		errLogf("SORT: 1 %s", self->sortFields[0]);
		jsonValueObjectArraySort(self->table, self->sortFields);
		errLogf("SORT: 2 %s", self->sortFields[0]);
		self->sorted = 1;
	}

	htable = htTable("teste", NULL);

	hrow = htTr("teste_row", NULL);
	for(f=0; f<self->nfields; f++){
		s = jsonTableCheckSortFields(self->sortFields, self->fields[f]);
		hrow->add(hrow,
			htTh("table_header",
				htDiv(s==0 ? NULL : (s==1? "table_sort_down" : "table_sort_up"), NULL),
				htText(self->fields[f]),
				htEventNew("onClick", self, jsonTableClickHandler,self->fields[f])
			)
		);
	}
	htable->add(htable,hrow);

	if(jsonValueType(self->table) == JSON_ARRAY){

		for(n=0; n<jsonValueArrayLength(self->table); n++){

			j = jsonValueArrayGet(self->table, n);
			if(j==NULL || jsonValueType(j)!=JSON_OBJECT) continue;

			hrow = htTr("teste_row", NULL);
			for(f=0; f<self->nfields; f++){
				field = jsonValueObjectGet(j, self->fields[f]);
				hrow->add(hrow, htTd(n%2?"table_cell table_even":"table_cell table_pair", htText(jsonValueGetAsString(field))));
			}
			htable->add(htable,hrow);
		}
	}

	return htDiv("json", htable);
}
