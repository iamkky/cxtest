#include <stddef.h>
#include <stdlib.h>
#include <string.h>

#include <abd/printf.h>
#include <abd/malloc_copy.h>
#include <abd/sort.h>

#include <awtk/api.h>
#include <awtk/util.h>

//HEADERX(JsonTable.cx.h, _JSONTABLE_COMPONENT_H_)
#include <awtk/HComponent.h>
#include <abd/AVec.c.h>
#include <abjson/json.h>

Class(JsonTable) {
	HComponent_st   super;
	JsonValue	table;
	int		nfields;
	AVec		fields;
	char		**sortFields;
	int		sorted;
};

Constructor(JsonTable, JsonValue attributes);
Destructor(JsonTable);

He	jsonTableRender(HComponent component);
int	jsonTableLoadFromUrl(JsonTable self, char *url);

//ENDX

int static jsonTableDetectFields(JsonTable self);
int static jsonTableDataFetchHandler(void *component, StringBuffer sb);

Constructor(JsonTable, JsonValue attributes)
{
char *url = NULL;

	CInit(JsonTable);
	HComponentConstructor((HComponent)self, attributes);

	self->super.render = jsonTableRender;

	self->table = NULL;
	self->nfields = 0;
	self->fields = CNew(AVec);
	self->sortFields = NULL;
	self->sorted = 0;

	url = hcomponentGetAttributeAsString((HComponent)self, "url");

	if(url) jsonTableLoadFromUrl(self, url);

	return self;
}

Destructor(JsonTable)
{
	if(nullAssert(self)) return;

	jsonValueFree(self->table);
	AVecFree(self->fields);
	free(self);
}

///// Handlers
/////

int static jsonTableDataFetchHandler(void *component, StringBuffer sb)
{
JsonTable  self = (JsonTable)component;
JsonValue  j;
JsonParser jp;
int lcount, result;

	if(nullAssert(self)) return -1;

	self->table = awtkParsesJson(sb);
	jsonTableDetectFields(self);

	return 0;
} 

// Manages table header click callback
// Disable since the migartion from old abjson
int static jsonTableClickHandler(void *component, char *value)
{
JsonTable self = (JsonTable)component;
char	  dir = '+';

	if(nullAssert(self)) return -1;

	if(!strcmp(self->sortFields[0]+1, value)){
		if(self->sortFields[0][0]=='+'){
			self->sortFields[0][0] = '-';
		}else{
			self->sortFields[0][0] = '+';
		}
	}else{
		self->sortFields[0] = strf("%c%s", dir, value);
	}
	self->sortFields[1] = NULL;
	self->sorted = 0;

	return 0;
}

int static jsonTableDetectFields(JsonTable self)
{
JsonValue	row;
int		cc, nn;

	if(nullAssert(self)) return -1;
	if(nullAssert(self->table)) return -1;
	
	if(self->fields){
		AVecFree(self->fields);
	}

	self->fields = CNew(AVec);

	if(jsonValueGetType(self->table) != JSON_ARRAY) return -1;

	for(nn=0; nn<jsonValueGetLength(self->table); nn++){
		row = jsonValueGet_i(self->table, nn);

		if(row==NULL || jsonValueGetType(row)!=JSON_OBJECT) continue;

		for(cc=0; cc<jsonValueGetLength(row); cc++){
			aVecAppend(self->fields, jsonValueGet_ik(row, cc));
		}

		break;
	}

	return 0;
}

int static checkSortFields(char **sortFields, char *field)
{
	while(*sortFields){
		if(!strcmp((*sortFields)+1, field)){
			return (sortFields[0][0]=='-') ? -1 : 1;
		}
		sortFields++;
	}
	return 0;
}

int jsonTableLoadFromUrl(JsonTable self, char *url)
{
	if(nullAssert(self)) return -1;

	wasmFetch(url, self, jsonTableDataFetchHandler);	

	return 0;
}

He jsonTableRender(HComponent component)
{
JsonTable	self = (JsonTable)component;
He		htable, hrow, hcell, dir, list;
JsonValue	field, row, l;
int		n, f;

	if(nullAssert(self) || nullAssert(self->table)) {
		return {% <div class="json"> No Table </div> %};
	}

	if(jsonValueGetType(self->table) != JSON_ARRAY) {
		return {% <div class="json"> No Table </div> %};
	}

	if(!self->sorted){
		//jsonValueObjectArraySort(self->table, self->sortFields);
		self->sorted = 1;
	}

	htable = {% <table class="teste"> </table> %};
	hrow = {% <tr class="teste_row"> </tr> %};
	for(f=0; f<aVecGetSize(self->fields); f++){
		//int s = checkSortFields(self->sortFields, self->fields[f]);
		heAddChild(hrow,
			//{% <th class="table_header"> <div class={s==0 ? NULL : (s==1? "table_sort_down" : "table_sort_up")}> </div> {self->fields[f]} </th> %}
			{% <th class="table_header"> <div class="table_sort_down"> </div> {aVecGetItem(self->fields, f)} </th> %}
		);
	}
	heAddChild(htable, hrow);

	for(n=0; n<jsonValueGetLength(self->table); n++){
		row = jsonValueGet_i(self->table, n);
		if(row==NULL || jsonValueGetType(row)!=JSON_OBJECT) continue;
		heAddChild(htable, hrow = {% <tr class="teste_row"> </tr> %} );
		for(f=0; f<aVecGetSize(self->fields); f++){
			field = jsonValueGet_k(row, aVecGetItem(self->fields, f));
			heAddChild(hrow, {%
					<td class="table_header"> 
						<div class={n%2?"table_cell table_even":"table_cell table_pair"}>
						{jsonValueGetAsString(field)}
 						</div>
					</td>
				%}
			);
		}
	}

	return {% <div class="json"> [htable] </div> %};
}
