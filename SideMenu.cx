#include <string.h>
#include "abd/printf.h"
#include "awtk/api.h"
#include "awtk/util.h"

//HEADERX(SideMenu.cx.h,_HTE_SIDEMENU_COMPONENT_H_)
#include <awtk/HComponent.h>
#include <abjson/json.h>

Class(SideMenu) {
	HComponent_st	super;
	JsonValue	menu;
};

Constructor(SideMenu, JsonValue attributes);
Destructor(SideMenu);

He	sideMenuRender(HComponent self);
int	sideMenuClickHandler(StringBuffer event_type, void *component, StringBuffer value);
int	sideMenuLoadFromUrl(SideMenu  self, char *url);

//ENDX

Constructor(SideMenu, JsonValue attributes)
{
char *url;

	CInit(SideMenu);
	HComponentConstructor((HComponent)self, attributes);

	self->super.render = sideMenuRender;

	url = hcomponentGetAttributeAsString((HComponent)self, "url");

	if(url) sideMenuLoadFromUrl(self, url);

	return self;
}

Destructor(SideMenu)
{
	free(self);
}

int static sideMenuDataFetchHandler(void *component, StringBuffer sb)
{
SideMenu   self = (SideMenu)component;

	if(nullAssert(self)) return -1;

	self->menu = awtkParsesJson(sb);
	//jsonValuePrint(self->menu);

	return 0;
} 

int sideMenuLoadFromUrl(SideMenu  self, char *url)
{
	if(nullAssert(self)) return -1;

	wasmFetch(url, self, sideMenuDataFetchHandler);	

	return 0;
}

int sideMenuClickHandler(StringBuffer event_type, void *component, StringBuffer value)
{
SideMenu self = (SideMenu)component;
char	ch;

	errLogf("Teste char >%s<\n", value->buffer);

	if(value==NULL) return 0;
	if(value->buffer==NULL) return 0;
	ch = *(value->buffer);

	switch(ch){
	case '+':;
	case '-':;
	}

	return 0;
}

He static sideMenuItem(SideMenu self, JsonValue menu_item, ...)
{
char *title, *icon, *href;

	if(menu_item == NULL || jsonValueGetType(menu_item)!=JSON_OBJECT) return {% <li /> %};

	title = jsonValueGetAsString(jsonValueGet_k(menu_item, "title"));
	icon  = jsonValueGetAsString(jsonValueGet_k(menu_item, "icon"));
	href  = jsonValueGetAsString(jsonValueGet_k(menu_item, "href"));

	return {%
	<li class="cx-sidemenu-item">
		<a href={href}> <i class={icon} />  <span class="cx-sidemenu-title"> {title} </span> </a>
	</li>
	%};
}

He static sideMenuBar(SideMenu self, JsonValue menu, ...)
{
JsonValue	items, menu_item;
int		c;
He		ulist;

	ulist = {% <ul class="cx-sidemenu-bar"> </ul> %};

	if(jsonValueGetType(self->menu)!=JSON_OBJECT) return ulist;

	items = jsonValueGet_k(self->menu,"items");
	if(jsonValueGetType(items)!=JSON_ARRAY) return ulist;

	for(c=0; c<jsonValueGetLength(items); c++){
		menu_item = jsonValueGet_i(items, c);
		heAddChild(ulist, {% <sideMenuItem(self, menu_item) /> %});
	}

	return ulist;
}

/*
			<div class="keyboard_button" onClick=sideMenuClickHandler(("C"))> C </div>
			<div class="keyboard_button" onClick=sideMenuClickHandler(("X"))> CE </div>
			<div class="keyboard_button" onClick=sideMenuClickHandler((""))>  </div>
			<div class="keyboard_button" onClick=sideMenuClickHandler(("/"))> / </div>
*/

He sideMenuRender(HComponent component)
{
SideMenu self = (SideMenu)component;

	return {%
	<div class="cx-sidemenu">
		<sideMenuBar(self, self->menu) />
	</div>
	%};
}

