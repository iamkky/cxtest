#include <string.h>
#include "abd/printf.h"
#include "awtk/api.h"
#include "awtk/util.h"

//HEADERX(SideMenu.cx.h,_HTE_SIDEMENU_COMPONENT_H_)
#include <awtk/HComponent.h>
#include <abjson/json.h>

Class(SideMenu) {
	HComponent_st	super;
	AData	menu;
	int		sel0, sel1;
	int		hover0, hover1;
};

Constructor(SideMenu, AData attributes);
Destructor(SideMenu);

He	sideMenuRender(HComponent self);
int	sideMenuClickHandler(StringBuffer event_type, void *component, StringBuffer value);
int	sideMenuLoadFromUrl(SideMenu  self, char *url);

//ENDX

Constructor(SideMenu, AData attributes)
{
char *url;

	CInit(SideMenu);
	HComponentConstructor((HComponent)self, attributes);

	self->super.render = sideMenuRender;

	self->menu = NULL;
	self->sel0 = 1;
	self->sel1 = 2;
	self->hover0 = -1;
	self->hover1 = -1;

	url = hcomponentGetAttributeAsString((HComponent)self, "url");

	if(url) sideMenuLoadFromUrl(self, url);

	return self;
}

Destructor(SideMenu)
{
	free(self);
}

int static sideMenuDataFetchHandler(void *component, StringBuffer sb)
{
SideMenu   self = (SideMenu)component;

	if(nullAssert(self)) return -1;

	self->menu = awtkParsesJson(sb);
	//aDataPrint(self->menu);

	return 0;
} 

int sideMenuClickHandler(StringBuffer event_type, void *component, StringBuffer value)
{
SideMenu self = (SideMenu)component;
char	 *value_ptr;
int	 sel;

	if(nullAssert(value)) return 0;

	value_ptr = stringBufferGetBuffer(value);

	errLogf("sideMenuClickHandler >%s<\n", value_ptr);

	sel = atoi(value_ptr);

	if(sel>=1000){
		self->sel0 = sel/1000;
		self->sel1 = sel - 1000 * self->sel0;
	}

	return 0;
}

int sideMenuMouseOverHandler(StringBuffer event_type, void *component, StringBuffer value)
{
SideMenu self = (SideMenu)component;
char	 *value_ptr;
int	 sel;

	if(nullAssert(value)) return 0;

	value_ptr = stringBufferGetBuffer(value);

	errLogf("sideMenuMouseOverHandler >%s<\n", value_ptr);

	sel = atoi(value_ptr);

	if(sel<1000){
		self->hover0 = sel;
	};

	return 0;
}

int sideMenuLoadFromUrl(SideMenu  self, char *url)
{
	if(nullAssert(self)) return -1;

	wasmFetch(url, self, sideMenuDataFetchHandler);	

	return 0;
}

He static sideMenuItem(SideMenu self, AData menu_item, int selected, char *cmd, ...)
{
char *title, *icon, *href, *msg;

	if(menu_item == NULL || aDataGetType(menu_item)!=ADATA_OBJECT) return {% <li /> %};

	title = aDataGetAsString(aDataGet_k(menu_item, "title"));
	icon  = aDataGetAsString(aDataGet_k(menu_item, "icon"));
	href  = aDataGetAsString(aDataGet_k(menu_item, "href"));

	return {%
	<li class={{"cx-sidemenu-item cx-sidemenu-item-%sselected", selected ? "" : "un"}} onClick=sideMenuClickHandler(({cmd})) onMouseOver=sideMenuMouseOverHandler(({cmd}))>
		<a href={href}> <i class={icon} />  <span class="cx-sidemenu-title"> {title} </span> </a>
	</li>
	%};
}

He static sideMenuBar(SideMenu self, AData menu, int level, int sel, ...)
{
AData	items, menu_item;
char		*cmd;
int		c;
He		ulist;

	ulist = {% <ul class="cx-sidemenu-bar"> </ul> %};

	if(aDataGetType(menu)!=ADATA_OBJECT) return ulist;

	items = aDataGet_k(menu,"items");
	if(aDataGetType(items)!=ADATA_ARRAY) return ulist;

	for(c=0; c<aDataGetSize(items); c++){
		menu_item = aDataGet_i(items, c);
		cmd = strf("%d", level*1000+c);
		heAddChild(ulist, {% <sideMenuItem(self, menu_item, c == sel, cmd) /> %});
		if(cmd) free(cmd);
	}

	return ulist;
}

He sideMenuRender(HComponent component)
{
SideMenu	self = (SideMenu)component;

AData	tmp, second_menu, items, menu_item;
int		c;
He		menu, style;

	if(nullAssert(self) || aDataGetType(self->menu)!=ADATA_OBJECT) return {% <div class="cx-sidemenu"> no menu </div> %};

	menu = {%
		<div class="cx-sidemenu">
			<div class="cx-sidemenu-level0">
				<sideMenuBar(self, self->menu, 0, self->sel0) />
			</div>
		</div>
	%};

	items = aDataGet_k(self->menu,"items");
	if(aDataGetType(items)==ADATA_ARRAY) {
		menu_item = aDataGet_i(items, self->hover0 >= 0 ? self->hover0 : self->sel0);
		errLogf("CATATATUIA: %d\n", self->hover0);
		heAddChild(menu, {%
			<div class="cx-sidemenu-level1">
				<sideMenuBar(self, menu_item, 1, self->sel1) />
			</div>
		%});
	}

	return menu;
}

